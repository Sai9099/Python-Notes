Python Variable Scope:

A variable scope specifies the region where we can access a variable.

Based on the scope, we can classify Python variables into three types:

1.Local Variables
2.Global Variables
3.Nonlocal Variables


Local Variables:

When we declare variables inside a function, these variables will have a local scope (within the function). We cannot access them outside the function.


eg:

def greet():

    # local variable
    message = 'Hello'
    
    print('Local', message)

greet()

# try to access message variable 
# outside greet() function
print(message)
 

Global Variables:

a variable declared outside of the function or in global scope is known as a global variable. This means that a global variable can be accessed inside or outside of the function.

message = 'Hello'

def greet():
    # declare local variable
    print('Local', message)

greet()
print('Global', message)


Nonlocal Variables:

the nonlocal keyword is used within nested functions to indicate that a variable is not local to the inner function, but rather belongs to an enclosing functionâ€™s scope.

This allows you to modify a variable from the outer function within the nested function, while still keeping it distinct from global variables.


# outside function 
def outer():
    message = 'local'

    # nested function  
    def inner():

        # declare nonlocal variable
        nonlocal message

        message = 'nonlocal'
        print("inner:", message)

    inner()
    print("outer:", message)

outer()

note:
-----
If we change the value of a nonlocal variable, the changes appear in the local variable.


Rules of global Keyword
-----------------------
The basic rules for global keyword in Python are:

When we create a variable inside a function, it is local by default.
When we define a variable outside of a function, it is global by default. You don't have to use the global keyword.
We use the global keyword to modify (write to) a global variable inside a function.
Use of the global keyword outside a function has no effect.


eg:

c = 1 # global variable
def add():
    print(c)
add()

eg:

# global variable
c = 1 
def add():
    c = c + 2
    print(c)
add()



# global variable
c = 1 

def add():

    # use of global keyword
    global c

    # increment c by 2
    c = c + 2 

    print(c)

add()