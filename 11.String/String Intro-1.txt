A string is just a sequence of characters. It is among the most popular data types in Python. It can be created simply by enclosing characters in quotes.

Python provides a rich set of operators, functions, and methods for working with strings, which helps access and extract portions of strings and manipulate and modify string data.


What is a string in python?
----------------------------
Technically speaking, an immutable data sequence is known as a string in Python. In simple words, as discussed in the case of a crossword, a Python string is nothing but an array of characters, but a computer does not understand characters. It only understands the language of 0’s and 1’s.

So these characters are converted to a number so the computer can understand them clearly. This conversion is known as encoding. ASCII and Unicode are some of the popular encodings used.

To put it simply, Python strings are a sequence of Unicode characters.

Creating a String in Python
---------------------------
A string in Python can be easily created using single, double, or even triple quotes. The characters that form the string are enclosed within any of these quotes.

Note: Triple quotes are generally used when we are working with multiline strings in Python and docstring in Python.

Indexing
--------
Indexing means referring to an element of an iterable by its position within the iterable. Each of a string’s characters corresponds to an index number and each character can be accessed using its index number. We can access characters in a String in Two ways :

Accessing Characters by Positive Index Number
Accessing Characters by Negative Index Number

1. Accessing Characters by Positive Index Number: In this type of Indexing, we pass a Positive index(which we want to access) in square brackets. The index number starts from index number 0 (which denotes the first character of a string).

str = "Geeks for Geeks !"
print(str[0]) 
print(str[6]) 
print(str[10]) 

2. Accessing Characters by Negative Index Number: In this type of Indexing, we pass the Negative index(which we want to access) in square brackets. Here the index number starts from index number -1 (which denotes the last character of a string). Example 2 (Negative Indexing) : 

str = "Geeks for Geeks !"
print(str[-1]) 
print(str[-5]) 
print(str[-10]) 


Slicing
-------
Slicing in Python is a feature that enables accessing parts of the sequence. In slicing a string, we create a substring, which is essentially a string that exists within another string. We use slicing when we require a part of the string and not the complete string.

Syntax:
-------
string[start : end : step]

start : We provide the starting index.
end : We provide the end index(this is not included in substring).
step : It is an optional argument that determines the increment between each index for slicing.


str ="Geeks for python !"
 
# slicing using indexing sequence 
print(str[: 3]) 
print(str[1 : 5 : 2]) 
print(str[-1 : -12 : -2]) 


str ="Geeks for Geeks !"
print("Original String :-") 
print(str) 
print("Reverse String :-") 
print(str[: : -1]) 