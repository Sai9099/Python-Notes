set datatype 
------------
set is an unordered collection data type.if we want to represent a group of values without duplicates where order is not important then we should go for set datatype.

Set are represented by { }

eg:

var = {"Geeks", "for", "clouds"}
print(type(var))


1.insertion order is not preserved
2.duplicates are not allowed
3.heterogenous objects are allowed
4.index concept is not applicable
5.set is mutable collection,the individual elements within the set must be immutable and cannot be changed directly.
6.growable in nature

note:
The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set. This is based on a data structure known as a hash table. Since sets are unordered, we cannot access items using indexes as we do in lists.



Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}  
print(Days)  
print(type(Days))  
print("Looping through the set elements ... ")  
for i in Days:  
    print(i)

☞ Union (|) Operator

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1 | Days2)

☞ Intersection (&) Operator

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1 & Days2)

☞ Difference (-) Operator

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1 - Days2)


☞ len()

num={1,2,3,4,5,6}
print(“length of set :”,len(num))

☞ max()

num={1,2,3,4,5,6}
lang={'java','c','python','cpp'}
print("Max of set :",max(num))
print("Max of set :",max(lang))

☞ min()

num={1,2,3,4,5,6}
lang={'java','c','python','cpp'}
print("Min of set :",min(num))
print("Min of set :",min(lang))

☞ sum()

num={1,2,3,4,5,6}
print(“sum of set items :”,sum(num))

☞ sorted()

num={1,3,2,4,6,5}
lang={'java','c','python','cpp'}
print(sorted(num))
print(sorted(lang))
print(sorted(num,reverse=True))

☞ set()
set1=set("PYTHON")
print(set1)
days=["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"]
set2 = set(days)  
print(set2) 
days=("Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun")
set3 = set(days)
print(set3)

☞ add()
Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}  
print("\n printing the original set ... ")  
print(Days)
Days.add("Saturday");
Days.add("Sunday");
print("\n Printing the modified set..."); 
print(Days)

☞ update()

Months={"Jan","Feb","Mar","Apr"}
print("\n Printing the original set ... ")  
print(Months)
Months.update (["May","Jun","Jul"])
print("\n Printing the modified set..."); 
print(Months)

☞ discard()

Months={"Jan","Feb","Mar","Apr"}
print("\n printing the original set ... ")  
print(Months)
Months.discard("Apr")
print("\n Printing the modified set..."); 
print(Months)
Months.discard("May")		#doesn’t give error
print("\n Printing the modified set..."); 
print(Months)

☞ remove()

Months={"Jan","Feb","Mar","Apr"}
print("\n printing the original set ... ")  
print(Months)
Months.remove("Apr")
print("\n Printing the modified set..."); 
print(Months)
Months.remove("May")		#it give error
print("\n Printing the modified set..."); 
print(Months)

☞ pop()

Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}  
print("\n printing the original set ... ")  
print(Days)
Days.pop()
print("\n Printing the modified set..."); 
print(Days)

☞ clear()

Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}  
print("\n printing the original set ... ")  
print(Days)
Days.clear()
print("\n Printing the modified set..."); 
print(Days)

☞ union ()

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1.union(Days2))

☞ intersection ()

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1.intersection(Days2))

☞ difference ()

Days1={"Mon","Tue","Wed","Sat"}
Days2={"Thr","Fri","Sat","Sun","Mon"}
print(Days1.difference(Days2))

☞ issubset()

set1={1,2,3,4}
set2={1,2,3,4,5,6,7,8,9}
print(set1.issubset(set2))
print(set2.issubset(set1))

☞ issuperset()

set1={1,2,3,4}
set2={1,2,3,4,5,6,7,8,9}
print(set1.issuperset(set2))
print(set2.issuperset(set1))